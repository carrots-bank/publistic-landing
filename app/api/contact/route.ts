import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const form = await req.formData();
    const name = (form.get("name") ?? "").toString().trim();
    const email = (form.get("email") ?? "").toString().trim();
    const messenger = (form.get("messenger") ?? "").toString().trim();
    const comment = (form.get("comment") ?? "").toString().trim();

    // honeypot (–ª–æ–≤—É—à–∫–∞ –¥–ª—è —Å–ø–∞–º–∞)
    const website = (form.get("website") ?? "").toString().trim();
    if (website) {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–±–æ—Ç)
      return NextResponse.redirect(new URL("/", req.url), { status: 303 });
    }

    // 2. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    const text =
      `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n` +
      `üë§ –ò–º—è: ${name}\n` +
      `‚úâÔ∏è Email: ${email}\n` +
      (messenger ? `üí¨ Messenger: ${messenger}\n` : "") +
      (comment ? `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n` : "") +
      `\n‚Äî Publistic Landing`;

    // 3. –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    if (!token || !chatId) {
      console.error("Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
      return NextResponse.json({ ok: false, error: "Server not configured" }, { status: 500 });
    }

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const tgUrl = `https://api.telegram.org/bot${token}/sendMessage`;
    const res = await fetch(tgUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }),
    });

    if (!res.ok) {
      const body = await res.text();
      console.error("Telegram error:", body);
      return NextResponse.json({ ok: false, error: "Telegram error" }, { status: 500 });
    }

    // 5. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤–∏–¥–µ–ª JSON)
    return NextResponse.redirect(new URL("/", req.url), { status: 303 });
  } catch (e) {
    console.error(e);
    return NextResponse.json({ ok: false, error: "Server error" }, { status: 500 });
  }
}
